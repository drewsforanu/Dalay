#include <iostream>
#include <thread>
#include <vector>
#include <queue>
#include <mutex>

std::mutex mtx;
std::queue<int> taskQueue;

void worker(int id) {
    while (true) {
        mtx.lock();
        if (taskQueue.empty()) {
            mtx.unlock();
            break;
        }
        int task = taskQueue.front();
        taskQueue.pop();
        mtx.unlock();

        std::cout << "Worker " << id << " processing task " << task << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

int main() {
    for (int i = 0; i < 10; ++i) taskQueue.push(i);

    std::vector<std::thread> workers;
    for (int i = 0; i < 3; ++i) workers.emplace_back(worker, i);

    for (auto &t : workers) t.join();
    return 0;
}
