import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position  # 节点在网格中的位置
        self.parent = parent      # 父节点（用于回溯路径）
        self.g = 0  # 从起点到当前节点的代价
        self.h = 0  # 当前节点到终点的启发式估计代价
        self.f = 0  # f = g + h

    def __lt__(self, other):
        return self.f < other.f

def astar(grid, start, end):
    open_list = []
    closed_set = set()
    start_node = Node(start)
    end_node = Node(end)
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_set.add(current_node.position)
        if current_node.position == end_node.position:
            path = []
            while current_node is not None:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]
        
        x, y = current_node.position
        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
        for next_pos in neighbors:
            # 判断是否越界
            if (next_pos[0] < 0 or next_pos[0] >= len(grid) or 
                next_pos[1] < 0 or next_pos[1] >= len(grid[0])):
                continue
            # 如果为障碍或已访问则跳过
            if grid[next_pos[0]][next_pos[1]] != 0 or next_pos in closed_set:
                continue
            neighbor = Node(next_pos, current_node)
            neighbor.g = current_node.g + 1
            # 使用曼哈顿距离作为启发函数
            neighbor.h = abs(neighbor.position[0]-end_node.position[0]) + abs(neighbor.position[1]-end_node.position[1])
            neighbor.f = neighbor.g + neighbor.h
            heapq.heappush(open_list, neighbor)
    return None

# 示例使用
grid = [
    [0, 0, 0, 0],
    [1, 1, 0, 1],
    [0, 0, 0, 0],
    [0, 1, 1, 0]
]
start = (0, 0)
end = (3, 3)
path = astar(grid, start, end)
print("找到的路径:", path)
